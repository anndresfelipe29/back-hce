// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

//import "./Persona.sol";
import "../models/PacienteVO.sol";
import "../persistence/PacienteMapper.sol";

// TODO: cambiar el diagrama, no puede heredar pero si puede usar o componerse de persona
contract Paciente {
    event Log(string data);
    address public creador;
    address public pacienteMapperAddress;

    PacienteMapper private pacienteMapper;

    constructor() {
        creador = msg.sender; // creador del contrato
    }

    function consultar(address direccion) public returns (PacienteVO) {
        emit Log("entro a consultar Paciente");
        try pacienteMapper.consultar(direccion) returns (PacienteVO response) {
            emit Log("encontro la Paciente");
            return response;
        } catch Error(string memory e) {
            /*reason*/
            emit Log("se rompio por un revert o require");
            emit Log(e);
            revert("No existe ese Paciente");
        }
    }

    // TODO: validar que pasa si falla el registro de persona
    // TODO: que pasa si falla guardar paciente?
    function registrar(address direccion, PacienteVO paciente) public {
        try pacienteMapper.guardar(direccion, paciente) {
            emit Log("Se guarda la informacion de paciente correctamente");
        } catch Error(string memory data) {
            revert("No existe ese medico");
        }
    }

    function actualizar(address direccion, PacienteVO paciente) public {
        pacienteMapper.actualizar(direccion, paciente);
        /*
        try contratoPacienteDAO.actualizar(direccion, paciente) {
            emit Log("Se guarda la informacion de paciente correctamente");
        } catch Error(string memory data) {
            /*reason*/
        /*  emit Log("se rompio por un revert o require");
            emit Log(data);
        }*/
    }

    // TODO: poner modificador para que solo lo pueda ejecutar el service y
    // en el service que solo lo ejecute un médico
    function cambiarEstado(address _direccion, uint256 _estadoId) public {
        PacienteVO paciente = consultar(_direccion);        
        paciente.setEstadoId(_estadoId);
        actualizar(_direccion, paciente);
    }

    function setPacienteMapperAddress(address _pacienteMapperAddress) public esPropietario {
        pacienteMapperAddress = _pacienteMapperAddress;
        pacienteMapper = PacienteMapper(_pacienteMapperAddress);
    }

    modifier esPropietario() {
        require(
            msg.sender == creador,
            "Esta funcion solo puede ser ejecutada por el creador del contrato"
        );
        _; // acá se ejecuta la función
    }

    function selfDestruct() public esPropietario {
        selfdestruct(payable(creador));
    }
}
