// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

// import "../persistence/PersonaDAO.sol";
import "../logica/Paciente.sol";
import "./AccesoService.sol";

// TODO: quizá todos los métodos en los service deban ser external (averiguar)
// https://ethereum.stackexchange.com/questions/19380/external-vs-public-best-practices?answertab=active#tab-top
contract PacienteService {
    event Log(string data);

    address public creador;
    address public ContratoAccesoServiceAddress;
    address public ContratoPacienteAddress;
    AccesoService private contratoAccesoService;
    Paciente private contratoPaciente;

    constructor() {
        creador = msg.sender; // creador del contrato
    }

    function cambiarEstado(address direccion, string memory estado)
        public
        esMedico
        returns (bool)
    {
        // TODO: quiza controllar el error acá
        Paciente.PersonaPacienteStruct memory pacienteInfo = contratoPaciente
            .consultar(direccion);
        pacienteInfo.paciente.estado = estado;
        contratoPaciente.actualizar(direccion, pacienteInfo.paciente);
    }

    function registrar(Paciente.PersonaPacienteStruct memory personaPaciente)
        public
    {
        contratoPaciente.registrar(msg.sender, personaPaciente);
        // TODO: poner excepcion en caso de error
        // personaDao.guardar(direccion, paciente);
    }

    // TODO: intentar dejarla como view
    // TODO: Cambiar a paciente
    // TODO: validar si consulta su propia informacion o es medico
    function consultar(address direccion)
        external
        esPropioOMedico(direccion)
        returns (Paciente.PersonaPacienteStruct memory)
    {
        // TODO: validar que sea paciente sino lanzar una excepcion
        // TODO: mejorar o completar la conversion del tipo padre al hijo,preguntas al profe que se puede hacer
        emit Log("entro a consultar");
        try contratoPaciente.consultar(direccion) returns (
            Paciente.PersonaPacienteStruct memory persona
        ) {
            // Paciente paciente = new Paciente();
            // paciente.setPrimerApellido(persona.getPrimerApellido()); // acá se rompe
            emit Log("encontro la persona");
            return persona;
        } catch Error(
            string memory /*reason*/
        ) {
            emit Log("Error interno: se rompio por un revert o require");
        } catch (
            bytes memory /*lowLevelData*/
        ) {
            emit Log("se rompio y ni idea porque ");
        }
    }

    function setContratoAccesoService(address direccion) public esPropietario {
        ContratoAccesoServiceAddress = direccion;
        contratoAccesoService = AccesoService(ContratoAccesoServiceAddress);
    }

    function setContratoPaciente(address direccion) public esPropietario {
        ContratoPacienteAddress = direccion;
        contratoPaciente = Paciente(ContratoPacienteAddress);
    }

    modifier esPropioOMedico(address direccion) {
        if (!(msg.sender == direccion)) {
            // TODO: agregar try catch para decir que no corresponde la identidad cundo falla consultar rol
            uint256 rolId = contratoAccesoService.consultarRol(msg.sender);
            require(
                rolId == 1,
                "Esta funcion solo puede ser ejecutada por un medico"
            );
        }
        _;
    }

    modifier esMedico() {
        uint256 rolId = contratoAccesoService.consultarRol(msg.sender);
        require(
            rolId == 1,
            "Esta funcion solo puede ser ejecutada por un medico"
        );
        _;
    }

    modifier esPropietario() {
        // NOTE: Los string no pueden llevar acentos, encontrar una forma de usarlos
        require(
            msg.sender == creador,
            "Esta funcion solo puede ser ejecutada por el creador del contrato"
        );
        _; // acá se ejecuta la función
    }

    function selfDestruct() public esPropietario {
        selfdestruct(payable(creador));
    }
}
